package com.simulator;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * @file       LogGenerator.java
 * @author     Arthi Bakkiyarajan, arthi.bakkiarajan89@gmail.com
 * @date       October 23, 2010
 * @version    1.0
 */

/**
 * @class      LogGenerator
 *
 * @brief      Generates Log.
 * @details    The file reader serverDetails.txt file and generates log content for
 * 	       each server. The log content consist of timestamp, ip address, cpu id 
 * 	       and cpu usage.
 */

public class LogGenerator {

	boolean isEOF=false;
	Date date;
	String dateString;
	File serverDetails;
	SimpleDateFormat format;
	/**
	 * @brief      A Constructor that sets Global variables.
	 *
	 * @details    Sets values for date and serverDetails
	 *
	 * @param      dateString    A date object
	 * 	       serverDetails File which has server details
	 *
	 */

	public LogGenerator(Date date, File serverDetails, String dateString){
		format = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		this. dateString = dateString;
		this.date = date;
		this.serverDetails = serverDetails;
	}
	
	/**
	 * @brief      Adds log content.
	 *
	 * @details    It reads serverdetails.txt and generates log content
	 * 	       for every server in the network.It creates thread for each server.
	 * @exception  IOException
	 *             if the file does not exist or if path is invalid.
	 *             InterruptedException
	 *             If a thread is interrupted by another thread.
	 */

	public void addLogsToLogFiles(){
		try {
			BufferedReader logBufferedReader = new BufferedReader(new FileReader(serverDetails));
			while (!isEOF) {
				
				Thread thread = new Thread(){
		    	public void run(){
		    		try {
		    			Date currentDate = format.parse(dateString);
		    			String line = logBufferedReader.readLine();
		    			if(line!=null){
			    			//clearDateTime();
					    	String [] server = line.split(" ");
					    	String logPath = server[1];
					    	File logFile = new File(logPath);
					        if (!logFile.exists()) {
								logFile.createNewFile();
					        }
					        writeLogContent(logFile.getAbsoluteFile(),server[0],currentDate);
			    		}else{
			    			isEOF = true;
			    		}
		    			
		    		}catch (IOException e) {
						e.printStackTrace();
					}catch(ParseException ex){
						ex.printStackTrace();
					}
		    	}
	
				private void writeLogContent(File file, String ip, Date currentDate) {
					try {
						FileWriter fileWriter = new FileWriter(file,true);
				        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
				        long count = 0;
				        while(count < 1440){
							long timeStamp = getTimeInMilliSeconds(currentDate);
					        String logContent = generateLogContent(timeStamp , ip);
							bufferedWriter.write(logContent);
							count++;
						}
				    	bufferedWriter.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				} 
		    };
		    
			thread.start();
			thread.join();
			}
	
		}catch (IOException e) {
			e.printStackTrace();
		}catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * @brief      Gets time in milliseconds.
	 *
	 * @details    Gets milliseconds from date object and increments it 
	 * 	       by one minute.
	 *
	 * @return     date A long value which represents time in ms.
	 *
	 */

	private long getTimeInMilliSeconds(Date date){
		
		long currentTime;
		currentTime = date.getTime();
		date.setTime(date.getTime()+(1000*60));			
		return currentTime;
	}
	
        /**
	 * @brief      Clears date and time
	 *
	 * @details    Resets date and time to 0
	 *
	 */

	private void clearDateTime() {
		
		if(date!=null){
			date.setHours(0);
			date.setMinutes(0);
			date.setSeconds(0);
		}
	}

	/**
	 * @brief      Generates log content.
	 *
	 * @details    Specifies timestamp, ip, cpu id and 
	 * 			   CPU usage.
	 *
	 * @param      timestamp A long value which contains time in milliseconds
	 * 	       ip        A string which contains ip address.
	 *
	 * @return     logcontent.
	 *
	 */

	private String generateLogContent(long timeStamp, String ip) {
		
		int cpuId = 0;
		String content = timeStamp+" "+ip+" "+cpuId+" "+getRandomCPUUsage()+"\n";
		cpuId++;
		content += timeStamp +" "+ip+" "+cpuId+" "+getRandomCPUUsage()+"\n";
		return content;
	}
	
	/**
	 * @brief      Generates cpu usage.
	 *
	 * @details    Generates random number between 1 and 100
	 *
	 * @return     randNumber An integer generated by random() function
	 */

	private int getRandomCPUUsage() {
		
		int randNumber = (int) (Math.random()*100+1);
		return randNumber;
	}

}
